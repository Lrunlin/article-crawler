{
  "time": "2021-10-19T13:23:36.286Z",
  "option": {
    "number": 3,
    "image": false,
    "time": true,
    "keyword": "j",
    "prohibited": "asdsadsadasdasd",
    "a": true,
    "type": "javascript"
  },
  "data": [
    {
      "title": "浅谈Java和JavaScript中变量和数据类型的区别",
      "html": "<p>对于一门编程语言的学习，如果第一步是安装环境，那么第二步一定是学习这门语言的基本规则，变量和数据类型则首当其冲  <br>JavaScipt作为一个蹭Java热度而命名的语言，在很多方面和Java也有一定的相似之处  <br>所以在我决定整理复习Java知识的时候，我希望通过一篇对比的文章，来顺便复习一下JavaScipt  </p><p>当然还有一个理由就是，纯写Java或者纯写JavaScipt的文章，很多人都做过了，再写着实没什么意思 :)</p><h3 id=\"item-1\">设计区别</h3><ol><li>Java是一种完全面向对象的编程语言，想要运用Java写东西就必须先设计对象；<br> 而JavaScript不一样，它是基于对象的一种脚本语言，它为开发者自带提供了很多内部对象，要更为简易省时</li><li>Java采用静态联编，Java的对象引用必须在编译时就进行，编译器需要实现强类型检查；<br> 而JavaScript不同，它采用动态联编，它的对象引用可以在运行时检查</li><li>它们最本质的不同就是用途，Java目前被广泛应用于PC端、手机端、互联网、数据中心等等；<br> 而JavaScript则被主要用于嵌入文本到HTML页面，读写HTML元素，控制cookies等</li><li><a href=\"https://link.segmentfault.com/?enc=2AjnF6%2BvWYjWf2PveKl1lQ%3D%3D.qxQvn6Ebtagc9zu9zwcGc0dM5WiR1n9u9%2FWWrfJfnHkojkDZbzn%2BeFuRQeU1bWA2XQvBbDzqpUZggJfLbcBPoQ%3D%3D\" rel=\"nofollow\" target=\"_blank\">设计区别中的内容参考了这篇博文 —— Java跟JavaScript两者间的关系和区别</a></li></ol><h3 id=\"item-2\">关于变量</h3><ol><li><p>不同之处</p><ul><li>在Java中，因为其强类型语言的特性，声明变量需要明确该变量的类型，内存管理系统根据变量的类型为变量分配存储空间</li><li>在JavaScript中，声明变量不需要指定变量类型，只需使用<code>var</code>关键字；<br>  不过在ES6的后续计划中，添加了<code>let</code>和<code>const</code>两个关键字用于声明不同作用的变量，但是依旧不需要声明变量类型</li><li>而且JavaScipt中的变量可以存储其他类型的变量的值，但是在Java中则有明确的类型要求，不过部分可以通过类型转换来存储其他类型的值</li><li>值得一提的是，虽然JavaScript不要求声明变量类型，但是可以通过<code>new</code>关键字来声明其类型</li></ul></li><li><p>相同之处</p><ul><li>变量是用于存储信息的<strong><em>容器</em></strong>，所以他们都是需要申请内存来存储值，通过变量名可以引用值，也可以修改变量名的值</li><li>都是等号右边赋值给等号左边 :)</li><li>命名规则基本一致，具体参考下面的文章 <a href=\"#jumpId-NameType\" target=\"_blank\">Java和JavaScript命名规则</a></li><li><code>++a</code>代表取<code>++</code>运算之后的值，<code>a++</code>表示取<code>++</code>运算之前的值</li></ul></li></ol><p>&lt;span id=\"jumpId-NameType\"&gt;&lt;/span&gt;</p><h4>Java和JavaScript命名规则</h4><ol><li>变量命名必须以字母、下划线<code>_</code>或者<code>$</code>为开头，其他字符可以是字母、<code>_</code>、<code>$</code>或数字</li><li>变量名中不允许使用空格和其他标点符号，首个字不能为数字，参考第一条</li><li>变量名长度不能超过255个字符<strong><em>注意!!!这是JavaScript的规则，Java参考各个类型的大小范围</em></strong></li><li>变量名区分大小写，建议驼峰命名法</li><li>变量名必须放在同一行中</li><li>不能使用关键字，分别具体是哪些自行百度</li><li><p>参考博文</p><ul><li><a href=\"https://link.segmentfault.com/?enc=6aER9%2BlB50Z7z0A4qyYwBg%3D%3D.bceFJ0ezAhzW8E1OYTvp7wLagwSECU0tb6xwrNCkf4w61YhFntUarO%2BY6il%2BfJyKssMDxr7f2RjyKzi%2BTmIqvg%3D%3D\" rel=\"nofollow\" target=\"_blank\">命名规则中的内容参考了这篇博文 —— js变量命名规则</a></li><li><a href=\"https://link.segmentfault.com/?enc=rXkP%2BEvMEsAxD6Om%2FnngGg%3D%3D.18QktOoohEIZQ2udMFfaTyIHvH4zCWLCgZTQerAkdhj08cyMZaW5HszOjrkMnYsfoBzb5UlhTFkcwFJmu3wlrw%3D%3D\" rel=\"nofollow\" target=\"_blank\">命名规则中的内容参考了这篇博文 —— Java变量命名规则</a></li></ul></li></ol><h3 id=\"item-3\">关于数据类型</h3><ol><li><p>不同之处</p><ul><li>提供的数据类型不同，具体可以参考下面 <a href=\"#jumpId-JavaType\" target=\"_blank\">Java数据类型</a> &amp; <a href=\"#jumpId-JsType\" target=\"_blank\">JavaScript数据类型</a> 两篇文章</li><li>类型转换并不相同，具体可以参考下面 <a href=\"#jumpId-JavaTypeChange\" target=\"_blank\">Java中的类型转换规则</a> &amp; <a href=\"#jumpId-JsTypeChange\" target=\"_blank\">JavaScript中的类型转换规则</a> 两篇文章</li></ul></li><li><p>相同之处</p><ul><li>在Java和JavaScript中都分为基本数据类型和引用数据类型两种</li></ul></li></ol><p>&lt;span id=\"jumpId-JavaType\"&gt;&lt;/span&gt;</p><h4>Java数据类型</h4><ol><li><p>基本数据类型</p><ul><li>8种基本类型，<strong><em>注意!!!</em></strong>下面括号是默认值</li><li>6种数字类型，其中4个整数型<code>byte</code>(0b)&amp;<code>short</code>(0s)&amp;<code>int</code>(0)&amp;<code>long</code>(0L)，2个浮点型<code>float</code>(0.0f)&amp;<code>double</code>(0.0d)</li><li>1种字符类型<code>char</code>(无默认值，大小范围是<code>\\u0000</code>-<code>\\uffff</code>，等效十进制<code>0</code>~<code>65535</code>)，<br>  关于<code>char</code>值需要提一句的是，<code>字符A</code>的十进制值是65，<code>字符a</code>的十进制值是97，后续字母依次每个加一，<br>  有个概念叫<code>ascii码</code>有兴趣的可以深入了解下</li><li>1种布尔类型<code>boolean</code>(false)</li><li><strong><em>注意!!!</em></strong>数字类型的结尾字母不需要考虑大小写，都可以</li><li>在计算机中负数由补码进行表示，<code>补码 = 源码取反 + 1</code>，举个例子：<br><code>22，在计算机中的表示为：00010110；-22，取反：11101001，加1：11101010</code></li></ul></li><li><p>引用数据类型</p><ul><li>String、对象、数组、类、接口 &amp; .etc</li><li>所有引用类型的默认值都是<code>null</code></li><li>一个引用变量可以用来引用任何与之兼容的类型</li></ul></li></ol><p>&lt;span id=\"jumpId-JsType\"&gt;&lt;/span&gt;</p><h4>JavaScript数据类型</h4><ol><li><p>基本数据类型</p><ul><li>字符串 <code>String</code>，单引号双引号包裹都可以</li><li>数字 <code>Number</code>，不分整数和小数，说实话这点写起来比Java爽，但是会有危险 :)</li><li>布尔 <code>Boolean</code>， <code>true</code>/<code>false</code></li><li>空 <code>Null</code>，可以将变量值设置为<code>null</code>来清空值</li><li>未定义 <code>Undefined</code>，表示变量不含有值</li><li><code>Symbol</code>，ES6中添加的新类型</li></ul></li><li><p>引用数据类型</p><ul><li>对象 <code>Object</code>，由花括号分隔，在括号内部，对象的属性以名称和值对的形式<code>name:value</code>来定义，属性由逗号分隔</li><li>数组 <code>Array</code>，<code>new</code>一个或者直接赋值(隐式创建)</li><li>日期 <code>Date</code>，主要是日期时间的一些操作，不过日常工作中习惯用<code>momentjs</code>处理日期和时间</li></ul></li><li><p>需要注意的一点</p><ul><li>JavaScript中的类型是针对值来说，而不是针对变量</li></ul></li></ol><p>&lt;span id=\"jumpId-JavaTypeChange\"&gt;&lt;/span&gt;</p><h4>Java中的类型转换规则</h4><ol><li><p>隐式（默认）类型转换</p><ul><li>基本类型的默认转换规则 <code>byte/short/char -&gt; int -&gt; long -&gt; float -&gt; double</code></li><li>当<code>byte/short/char</code>相互之间不能转换，它们参与运算首先将转换成<code>int</code>类型再进行运算</li><li>数字和字符串相加，数字会自动装换成字符串</li></ul></li><li><p>显示（强制）类型转换</p><ul><li><code>目标类型 变量名 = (目标类型)被转换的类型</code></li><li>容量大的数据类型转换为容量小的数据类型时，要加上强制转换符，但可能造成精度降低或溢出</li><li>有多种类型的数据混合运算时，系统首先自动的将所有数据转换成容量最大的那一种数据类型，然后再进行计算</li></ul></li><li><p>有趣的例子</p><ul><li>提问：Java是如何处理强制类型转换的溢出处理呢？</li><li><code>byte  a = (byte)130</code></li><li>答：在计算机中，所有的数据都是存储的补码形式，那么130首先被当成int型存储，四个字节32位，<br>  它的补码如下：<code>0000 0000  0000 0000  0000 0000  1000 0010</code>，转换为byte类型，进行截取，<br>  高字节部分去除，保留低字节部分，得到转换为byte类型的补码为：<code>1000 0010</code>，<br>  我们将其转换为源码：补码（1000 0010）-&gt; 反码（1000 0001）-&gt; 原码（1111 1110）为 -126，所以最后的答案是-126</li><li><a href=\"https://link.segmentfault.com/?enc=fCI69f9%2Fjj4pkA57d8lS5A%3D%3D.AJ8XaZsodENbyEd4Xiu3ToxNutC6Ivb%2F%2BG85Rw4PJ6I3CE58sttTh4G3G0awkYVt4R%2Fgd6tTRScnBv%2FGeif%2FnQ%3D%3D\" rel=\"nofollow\" target=\"_blank\">参考资料</a></li></ul></li></ol><p>&lt;span id=\"jumpId-JsTypeChange\"&gt;&lt;/span&gt;</p><h4>JavaScript中的类型转换规则</h4><p>JavaScript是弱类型语言，变量类型完全由当前值决定，这种类型就叫弱类型。<br>首先要记住的是，JavaScript中的类型转化，它得到的结果永远是基本类型，也就可以分为两种情况，<br>基本类型和基本类型之间的转化，引用类型转化为基本类型，不可能出现基本类型转化为引用类型，<br>类型转化出现最多就是转化成<code>Number</code>, <code>String</code>, 和<code>Boolean</code></p><h3 id=\"item-4\">Java中的主动类型转换常用方法</h3><p><a href=\"https://link.segmentfault.com/?enc=xolS%2Fpa33Tt1mb%2BbG7MUAw%3D%3D.V2aOmZXzbHqKCvSMm6oyMnglQ8QCWMhNphv43Ac4wgq0TxHWaWLCsetN%2BNig3aXvFeH6zddQW%2BQVH1Htzc8lxA%3D%3D\" rel=\"nofollow\" target=\"_blank\">这里感觉可以另外写一个专题博文，后期再补档，到时候再补个链接过来，有兴趣的同学可以先阅读这篇文章</a></p><h3 id=\"item-5\">JavaScript中的主动类型转换常用方法</h3><ol><li>将其他类型值（数字、布尔、日期）转字符串，一把都是用<code>toString()</code></li><li>字符串转数字，<code>parseInt()</code>转换成整数，<code>parseFloat()</code>转换成浮点数，整数和浮点数都是<code>Number</code>类型</li><li>将布尔转换成数字可以使用方法<code>Number()</code></li><li><p>当JavaScript尝试操作一个<strong><em>错误</em></strong>的数据类型时，会自动转换为<strong><em>正确</em></strong>的数据类型</p><ul><li>举个例子：<code>5 + null  // 返回数字5，null 转换为 0</code></li><li>举个例子：<code>'5' + null  // 返回字符串5null，null 转换为 'null'</code></li><li>其他例子就是字符串类型数字和数字类型数字之间的运算都会转成数字运算</li></ul></li><li><p>将其他类型值转换成布尔值类型</p><ul><li>原始类型值转换方法，这六个类型<code>undefined/null/-0/0/NaN/空字符串</code>全部为<code>false</code>，其他全部为<code>true</code></li><li>所有对象的布尔值都是<code>true</code>，甚至<code>false</code>对应的布尔值对象也是<code>true</code>，空对象空数组也都是<code>true</code></li><li>举个例子：<code>console.log(Boolean(new Boolean(false)))  // 输出true</code></li></ul></li><li><p>隐式类型的转换是系统进行运算时自动进行的，但是调用的方法都是显式类型转换的方法</p><ul><li>一元运算符<code>+</code>可以隐式的将字符串转为数字，如果变量不能转换成数字，他仍会成为一个数字，但值会是<code>NaN</code>，<br>  举个例子：<code>var a = 5; console.log(c = +a);  // 输出数字5</code>，<br>  举个例子：<code>var b = 'abc'; console.log(b = +abc);  // 输出NaN</code></li><li><code>- * / %</code>（减号、乘号、除号、取余运算符）运算时会通过<code>Number()</code>把数据转换成<code>Number</code>类型后，再进行运算</li><li><code>&amp;&amp; || !</code>（与或非运算符）运算时会通过<code>Boolean()</code>把数据转换成<code>Boolean</code>类型后，再进行运算</li><li><code>&lt; &gt; &lt;= &gt;= == !=</code>（比较运算符）运算时，当数字和字符串比较大小时，会隐示将字符串转换成<code>Number</code>类型进行比较，<br>  而当字符串和字符串比较大小时，则比较的是<code>ascii码</code>的大小，最后返回的则是布尔值</li><li><strong><em>注意!!!</em></strong>比较运算符中<code>undefined</code>和<code>null</code>是不会发生类型转换的，只有相等的值会返回<code>true</code></li><li><strong><em>注意!!!</em></strong> 全局<code>isNaN()</code>函数会将测试值通过<code>Number()</code>转换为数字，然后对其进行测试，<br>  但是<code>Number.isNaN()</code>不会将值转换为数字，并且不会为任何非数字类型的值返回<code>true</code></li></ul></li><li>如果用<code>==</code>来判断两个数值是否相等，由于会发生隐式类型转换，所以是非常存在非常大的漏洞的，<br> 为了解决这一问题，引入了<code>===</code>（绝对等于）和<code>!==</code>（绝对不等于）</li><li><a href=\"https://link.segmentfault.com/?enc=ra1Ri7P6OirLIPVionWcAw%3D%3D.404ww8Pc5C9C%2Bbpaudt8tVDOVoaoyGc9LnzpxjNvCqXMOj5wm1RjdURcCF9u5zC3WlKIo98kEC4BCVK6kZ5UOg%3D%3D\" rel=\"nofollow\" target=\"_blank\">参考资料一</a>、<a href=\"https://link.segmentfault.com/?enc=TVzREhUSi2A36mcklPBlWg%3D%3D.WpKcI8rp9vjM%2BLTk8AswvThq0OB4EL%2Bf%2B97zF8Ye7dx2Gn0IhkM%2BvAUa8rB6tsXA\" rel=\"nofollow\" target=\"_blank\">参考资料二</a></li></ol>",
      "type": ["java", "javascript"],
      "time": "2021-10-19T11:54:45.000Z",
      "href": "https://segmentfault.com/a/1190000040835391"
    },
    {
      "title": "浅谈在CSS中，元素水平居中且垂直居中的常用的方法",
      "html": "<p>（1）第一种方法：使用绝对定位+外边距（设置position为绝对定位absolute,给left和top分别设置为父级元素的50%,设置上外边距和左外边距为分别为自身高度和宽度的一半，且为负值）</p><pre><code>position:absolute; \nleft:50%; \ntop:50%; \nmargin-top:-height/2px; \nmargin-left:-width/2px;\n</code></pre><p>（2）第二种方法：也是使用绝对定位+外边距（设置position为绝对定位absolute,给left、right、top、bottom都设置为零；设置外边距为auto自动适应）</p><pre><code>position:absolute;\nleft:0; \nright:0; \ntop:0; \nbottom:0; \nmargin:auto;\n</code></pre><p>（3）第三种方法：dispaly:inline-block与vertical-align:middle 配合来父元素的text-align:center;</p><pre><code>父：\ntext-align:center;\n子：\ndisplay:inline-block\nvertical-align:middle</code></pre><p><a href=\"https://link.segmentfault.com/?enc=DxLdjP3Q34YgVTPqzH6eNw%3D%3D.igIt29GHPH8xOMb9UHf0zNTap153qFU8GV9VNhFGcBdBxk%2B8rjqYZhhMFsasBLk%2BqUjDpPnjvfRtDGQpZ4EBbQ%3D%3D\" rel=\"nofollow\" target=\"_blank\">display属性详情</a><br><a href=\"https://link.segmentfault.com/?enc=65HyDzA5rJ%2Fd39mPpJRHWQ%3D%3D.36E1HhJBuopqnb%2Ffg9bHZWgxu3TQikdqtcmJPHcDNKhSQFgmDLTp82OUEBuRYGE%2FccpmQgVvk9q7nvmMxySL2Q%3D%3D\" rel=\"nofollow\" target=\"_blank\">vertical-align属性详情</a></p><p>（4）第四种方法：使用绝对定位+平移（设置position为绝对定位absolute,给left和top分别设置为父级元素的50%,设置X轴平移和Y轴平移距离为分别为自身高度和宽度的一半，且为负值）</p><pre><code>position:absolute;\ntop:50%; \nleft:50%; \ntransform:translateX(-50%); \ntransform:translateY(-50%);</code></pre><p><a href=\"https://link.segmentfault.com/?enc=0qcLwrvA9qg%2BrnF3Layn2w%3D%3D.8WUEgKWlDbGVGW1f70ckesSSjyi8W58H6R8ohUXWfwOwCSKg3s%2FJ%2FGI%2BiwPr%2Fpcb\" rel=\"nofollow\" target=\"_blank\">什么是transform?</a></p><p>（5）第五种方法：这种方法是使用flex布局，在元素css中声明为flex;</p><pre><code>display:flex; \njustify-content:center; \nalign-items:center;</code></pre><p><a href=\"https://link.segmentfault.com/?enc=O6LKW07ds3FCMeAyDdnhdQ%3D%3D.2EbI4ZD%2FhwrWJF6ztWIMpq1wWb45priMmsbpsiRmaMdVRnDlkbiAridYVn1%2F2%2BG7r5UC6clZ5FiwagW3RJgaBg%3D%3D\" rel=\"nofollow\" target=\"_blank\">什么是flex布局？</a></p><hr><p>加油！！！</p>",
      "type": ["css", "前端", "javascript", "chrome"],
      "time": "2021-10-19T09:41:36.000Z",
      "href": "https://segmentfault.com/a/1190000040834740"
    },
    {
      "title": "VS Code 技巧：自带 JavaScript 类型检查",
      "html": "<p>单个文件顶部添加 <code>// @ts-check</code> 即可。</p><pre><code>// @ts-check\nlet str = 'hello';\nstr = 123; // 报错：不能将类型“123”分配给类型“string”。</code></pre><p>也可全局配置：通过配置 <code>javascript.implicitProjectConfig.checkJs</code> 为 <code>true</code>，就开启了全局校验，这时可在不参与类型校验的 js 文件加 <code>// @ts-nocheck</code> 来禁用类型检查。</p>",
      "type": ["javascript", "visual-studio-code"],
      "time": "2021-10-19T02:46:42.000Z",
      "href": "https://segmentfault.com/a/1190000040831591"
    }
  ]
}
